"use strict";(self.webpackChunkbrooder=self.webpackChunkbrooder||[]).push([[6649],{3798:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"workflows/auth/account-management","title":"Account Management","description":"This workflow covers actions that a logged-in (authenticated) user can perform to manage their account.","source":"@site/docs/workflows/auth/account-management.md","sourceDirName":"workflows/auth","slug":"/workflows/auth/account-management","permalink":"/brooder-doc/docs/workflows/auth/account-management","draft":false,"unlisted":false,"editUrl":"https://github.com/khalidgxg/brooder/tree/main/docs/workflows/auth/account-management.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Password Management","permalink":"/brooder-doc/docs/workflows/auth/password-management"},"next":{"title":"General Support","permalink":"/brooder-doc/docs/workflows/support/general"}}');var t=s(4848),i=s(8453);const o={},d="Account Management",c={},a=[{value:"1. Get Profile",id:"1-get-profile",level:2},{value:"Flow Diagram",id:"flow-diagram",level:3},{value:"Success Response (200 OK)",id:"success-response-200-ok",level:3},{value:"2. Update Password",id:"2-update-password",level:2},{value:"Flow Diagram",id:"flow-diagram-1",level:3},{value:"Request Body",id:"request-body",level:3},{value:"Success Response (200 OK)",id:"success-response-200-ok-1",level:3},{value:"Error Response (422 Unprocessable Entity)",id:"error-response-422-unprocessable-entity",level:3},{value:"3. Switch Account",id:"3-switch-account",level:2},{value:"Flow Diagram",id:"flow-diagram-2",level:3},{value:"Endpoint Details",id:"endpoint-details",level:3},{value:"Request Body",id:"request-body-1",level:3},{value:"Success Response (200 OK)",id:"success-response-200-ok-2",level:3},{value:"Error Responses",id:"error-responses",level:3},{value:"Code Highlights &amp; Key Concepts",id:"code-highlights--key-concepts",level:3}];function l(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"account-management",children:"Account Management"})}),"\n",(0,t.jsx)(r.p,{children:"This workflow covers actions that a logged-in (authenticated) user can perform to manage their account."}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"1-get-profile",children:"1. Get Profile"}),"\n",(0,t.jsxs)(r.p,{children:["This endpoint fetches the detailed profile of the currently authenticated user. For details on how to ",(0,t.jsx)(r.strong,{children:"update"})," this information, see the ",(0,t.jsx)(r.a,{href:"../provider/profile-management",children:"Provider Profile Management"})," or ",(0,t.jsx)(r.a,{href:"../shared/profile-management",children:"Shared Profile Management"})," documentation."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Endpoint:"})," ",(0,t.jsx)(r.code,{children:"GET /api/v1/profile"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Method:"})," ",(0,t.jsx)(r.code,{children:"GET"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Authentication:"})," Required (User Token)"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"flow-diagram",children:"Flow Diagram"}),"\n",(0,t.jsx)(r.mermaid,{value:'graph LR;\r\n    A["Authenticated user sends request"] --\x3e B{"GET /api/v1/profile"};\r\n    B --\x3e C{"Fetch authenticated user data"};\r\n    C --\x3e D{"Load profile, media, city, etc."};\r\n    D --\x3e E{"If user is a Provider,<br>load provider-specific data"};\r\n    E --\x3e F["Return full user profile"];'}),"\n",(0,t.jsx)(r.h3,{id:"success-response-200-ok",children:"Success Response (200 OK)"}),"\n",(0,t.jsxs)(r.p,{children:["Returns a detailed user object. The shape of the response varies depending on the user's ",(0,t.jsx)(r.code,{children:"last_login_type"}),"."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Example for a Provider:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\r\n    "message": "Data retrieved successfully.",\r\n    "data": {\r\n        "id": 2,\r\n        "first_name": "Provider",\r\n        "last_name": "Test",\r\n        "email": "provider@test.com",\r\n        "phone": "987654321",\r\n        "last_login_type": "provider",\r\n        "provider": {\r\n            "id": 1,\r\n            "status": "active",\r\n            // ... other provider fields\r\n        },\r\n        "profile": {\r\n            // ... profile fields\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"2-update-password",children:"2. Update Password"}),"\n",(0,t.jsxs)(r.p,{children:["Allows an authenticated user to change their own password. This is part of the broader ",(0,t.jsx)(r.a,{href:"./password-management",children:"Password Management"})," workflow."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Endpoint:"})," ",(0,t.jsx)(r.code,{children:"POST /api/v1/update-password"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Method:"})," ",(0,t.jsx)(r.code,{children:"POST"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Authentication:"})," Required (User Token)"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"flow-diagram-1",children:"Flow Diagram"}),"\n",(0,t.jsx)(r.mermaid,{value:'graph LR;\r\n    G["Authenticated user sends<br>current and new passwords"] --\x3e H{"POST /api/v1/update-password"};\r\n    H --\x3e I{"Validate passwords"};\r\n    I -- Valid --\x3e J["Update user\'s password in database"];\r\n    J --\x3e K["Return success message"];\r\n    I -- Invalid --\x3e L["Return validation error"];'}),"\n",(0,t.jsx)(r.h3,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Rules"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"current_password"})}),(0,t.jsx)(r.td,{children:"string"}),(0,t.jsx)(r.td,{children:"Required, must match the user's current password."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"password"})}),(0,t.jsx)(r.td,{children:"string"}),(0,t.jsx)(r.td,{children:"Required, new password. Must be at least 8 characters."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"password_confirmation"})}),(0,t.jsx)(r.td,{children:"string"}),(0,t.jsxs)(r.td,{children:["Required, must match the new ",(0,t.jsx)(r.code,{children:"password"}),"."]})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"success-response-200-ok-1",children:"Success Response (200 OK)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\r\n    "message": "Password updated successfully."\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"error-response-422-unprocessable-entity",children:"Error Response (422 Unprocessable Entity)"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["If the ",(0,t.jsx)(r.code,{children:"current_password"})," is incorrect or the new password is weak."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"3-switch-account",children:"3. Switch Account"}),"\n",(0,t.jsx)(r.p,{children:"Allows a user who has both a Customer and a Provider account to switch between them. This is a security-sensitive operation that invalidates the old token and returns a new one for the requested role. The validation logic is different depending on which role is being switched to."}),"\n",(0,t.jsx)(r.h3,{id:"flow-diagram-2",children:"Flow Diagram"}),"\n",(0,t.jsx)(r.mermaid,{value:'graph TD;\r\n    subgraph "Switch Account Flow"\r\n        A["Authenticated user requests to switch role"] --\x3e B{"POST /api/v1/switch-account"};\r\n        B --\x3e C{"Is the target role \'provider\'?"};\r\n        C -- Yes --\x3e D{"Does the provider account exist?"};\r\n        D -- Yes --\x3e E{"Is the provider account created by a customer AND needs email verification?"};\r\n        E -- Yes --\x3e F["Send new OTP for provider email<br>Throw \'Email not verified\' error"];\r\n        E -- No --\x3e G{"Is provider account status \'ACTIVE\'?"};\r\n        G -- Yes --\x3e H["Proceed to Switch"];\r\n        G -- No --\x3e I["Throw \'Account not active/rejected\' error"];\r\n        D -- No --\x3e J["Throw \'Provider account does not exist\' error"];\r\n        C -- No (is \'customer\') --\x3e K{"Does the customer account exist?"};\r\n        K -- Yes --\x3e L{"Is customer account status \'ACTIVE\'?"};\r\n        L -- Yes --\x3e H;\r\n        L -- No --\x3e M["Throw \'Account not active\' error"];\r\n        K -- No --\x3e N["Throw \'Customer account does not exist\' error"];\r\n        subgraph "Proceed to Switch"\r\n        H --\x3e O["Delete Current API Token"];\r\n        O --\x3e P["Update user.last_login_type to target role"];\r\n        P --\x3e Q["Create & Return a NEW, role-specific API Token"];\r\n        end\r\n    end'}),"\n",(0,t.jsx)(r.h3,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Endpoint:"})," ",(0,t.jsx)(r.code,{children:"POST /api/v1/switch-account"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Method:"})," ",(0,t.jsx)(r.code,{children:"POST"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Authentication:"})," Required (User Token)"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"request-body-1",children:"Request Body"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Rules"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"user_type"})}),(0,t.jsx)(r.td,{children:"string"}),(0,t.jsxs)(r.td,{children:["Required, the type of account to switch to (",(0,t.jsx)(r.code,{children:"customer"})," or ",(0,t.jsx)(r.code,{children:"provider"}),")."]})]})})]}),"\n",(0,t.jsx)(r.h3,{id:"success-response-200-ok-2",children:"Success Response (200 OK)"}),"\n",(0,t.jsxs)(r.p,{children:["Returns a user object with a ",(0,t.jsx)(r.strong,{children:"new token"})," for the switched-to role."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\r\n    "message": "Account switched successfully.",\r\n    "data": {\r\n        "id": 2,\r\n        "last_login_type": "provider",\r\n        "token": "2|newProviderToken...", // New token is returned\r\n        // ... other user details\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"403 Forbidden:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"If the account being switched to does not exist for this user."}),"\n",(0,t.jsxs)(r.li,{children:["If the target account's status is not ",(0,t.jsx)(r.code,{children:"ACTIVE"})," (e.g., it is ",(0,t.jsx)(r.code,{children:"REVIEWING"})," or ",(0,t.jsx)(r.code,{children:"REJECTED"}),")."]}),"\n",(0,t.jsx)(r.li,{children:"If switching to a provider account that was initiated by a customer and the email for it has not yet been verified."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"code-highlights--key-concepts",children:"Code Highlights & Key Concepts"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsxs)(r.strong,{children:["Authenticated User Helper (",(0,t.jsx)(r.code,{children:"getAuthenticatable()"}),")"]}),": The ",(0,t.jsx)(r.code,{children:"GetProfileAction"})," uses a global helper ",(0,t.jsx)(r.code,{children:"getAuthenticatable()"})," to retrieve the currently logged-in user model. This is a clean way to get the authenticated instance without dependency injection."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsxs)(r.strong,{children:["Conditional Eager-Loading (",(0,t.jsx)(r.code,{children:"GetProfileAction"}),")"]}),": To build the profile response, the action uses eager loading (",(0,t.jsx)(r.code,{children:"->load()"}),"). It demonstrates a smart, conditional load: it always loads the base ",(0,t.jsx)(r.code,{children:"profile"}),", but then it checks the user's ",(0,t.jsx)(r.code,{children:"last_login_type"})," and only loads the ",(0,t.jsx)(r.code,{children:"provider"})," or ",(0,t.jsx)(r.code,{children:"customer"})," relationship that is relevant. This avoids unnecessary database queries."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsxs)(r.strong,{children:["Strict Validation Before Switching (",(0,t.jsx)(r.code,{children:"SwitchAccountAction"}),")"]}),": Before any switch occurs, the system performs rigorous checks (",(0,t.jsx)(r.code,{children:"validateCustomer"})," and ",(0,t.jsx)(r.code,{children:"validateProvider"})," methods). It verifies not only that the target role exists for the user (",(0,t.jsx)(r.code,{children:"$user->has_provider_account"}),") but also that its status is ",(0,t.jsx)(r.code,{children:"ACTIVE"}),". This is a critical step to prevent users from switching to an incomplete, rejected, or still-under-review profile."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsxs)(r.strong,{children:["Special Verification for Customer-Initiated Providers (",(0,t.jsx)(r.code,{children:"SwitchAccountAction"}),")"]}),": The system has a special flow for when a user tries to switch to a Provider account that was created for them ",(0,t.jsx)(r.em,{children:"by a Customer"}),". The ",(0,t.jsx)(r.code,{children:"handleEmailVerification"})," method checks if this is the case and if the user has verified their email for this new provider role. If not, it halts the switch, sends a new OTP, and returns a ",(0,t.jsx)(r.code,{children:"403 Forbidden"})," error, forcing the user to verify their email before they can access that provider profile. This is a key security and ownership verification step."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsxs)(r.strong,{children:["Atomic Token Swap (",(0,t.jsx)(r.code,{children:"SwitchAccountAction"}),")"]}),": The process of switching tokens is atomic and secure. The logic is explicit:\r\na. ",(0,t.jsx)(r.strong,{children:"Delete Old Token"}),": The currently used API token is immediately deleted (",(0,t.jsx)(r.code,{children:"$auth->currentAccessToken()->delete()"}),"). This invalidates the session for the previous role.\r\nb. ",(0,t.jsx)(r.strong,{children:"Update User State"}),": The ",(0,t.jsx)(r.code,{children:"last_login_type"})," on the ",(0,t.jsx)(r.code,{children:"User"})," model is updated and saved.\r\nc. ",(0,t.jsx)(r.strong,{children:"Issue New Token"}),": A brand new, role-specific token is generated for the new role (",(0,t.jsx)(r.code,{children:"$user->provider->createToken(...)"}),').\r\nThis "delete-then-create" process ensures that there is no time window where both tokens are valid and guarantees that the returned token is the only valid one for the user.']}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>o,x:()=>d});var n=s(6540);const t={},i=n.createContext(t);function o(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);