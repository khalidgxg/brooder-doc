"use strict";(self.webpackChunkbrooder=self.webpackChunkbrooder||[]).push([[6340],{7347:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>a,frontMatter:()=>t,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"workflows/provider/profile-management","title":"Profile Management (Provider)","description":"This document describes the provider-specific profile update workflow. For a general overview, see the Shared Profile Management documentation.","source":"@site/docs/workflows/provider/profile-management.md","sourceDirName":"workflows/provider","slug":"/workflows/provider/profile-management","permalink":"/brooder-doc/docs/workflows/provider/profile-management","draft":false,"unlisted":false,"editUrl":"https://github.com/khalidgxg/brooder/tree/main/docs/workflows/provider/profile-management.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Provider Setup","permalink":"/brooder-doc/docs/workflows/provider/setup"},"next":{"title":"Skill Management (Provider)","permalink":"/brooder-doc/docs/workflows/provider/skill-management"}}');var n=i(4848),s=i(8453);const t={},o="Profile Management (Provider)",l={},c=[{value:"Process Overview",id:"process-overview",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Core Logic &amp; Key Concepts",id:"core-logic--key-concepts",level:2}];function h(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"profile-management-provider",children:"Profile Management (Provider)"})}),"\n",(0,n.jsxs)(r.p,{children:["This document describes the provider-specific profile update workflow. For a general overview, see the ",(0,n.jsx)(r.a,{href:"../shared/profile-management",children:"Shared Profile Management documentation"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["This workflow allows an authenticated provider to update their profile information. The data is distributed across three different tables: ",(0,n.jsx)(r.code,{children:"users"}),", ",(0,n.jsx)(r.code,{children:"profiles"}),", and ",(0,n.jsx)(r.code,{children:"providers"}),"."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Endpoint:"})," ",(0,n.jsx)(r.code,{children:"PATCH /api/v1/provider/profile"})]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Authorization:"})," Bearer Token (Provider)"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Action:"})," ",(0,n.jsx)(r.code,{children:"Providers\\Profile\\UpdateProfileAction"})]}),"\n"]}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.h2,{id:"process-overview",children:"Process Overview"}),"\n",(0,n.jsx)(r.p,{children:"The action intelligently updates multiple database tables based on the fields provided in the request."}),"\n",(0,n.jsx)(r.mermaid,{value:'graph TD;\r\n    A["Provider sends PATCH request to /profile"] --\x3e B["UpdateProfileAction"];\r\n    \r\n    subgraph "Update Process"\r\n        B --\x3e C["Update `profiles` table<br>(bio, gender, birth_date, etc.)"];\r\n        B --\x3e D{"Phone provided?"};\r\n        D -- "Yes" --\x3e E["Update `phone` in `users` table"];\r\n        B --\x3e F{"Contact Email provided?"};\r\n        F -- "Yes" --\x3e G["Update `contact_email` in `providers` table"];\r\n        B --\x3e H{"Avatar provided?"};\r\n        H -- "New File" --\x3e I["Add new avatar to media collection"];\r\n        H -- "Set to null" --\x3e J["Clear avatar media collection"];\r\n    end\r\n\r\n    I --\x3e K((Success: Return Updated User));\r\n    J --\x3e K;\r\n    E --\x3e K;\r\n    G --\x3e K;\r\n    C --\x3e K;\r\n'}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.h2,{id:"request-body",children:"Request Body"}),"\n",(0,n.jsx)(r.p,{children:"All fields are optional. Only the fields included in the request will be updated."}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Field"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Rules"}),(0,n.jsx)(r.th,{children:"Description"}),(0,n.jsx)(r.th,{children:"Target Table"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"bio"})}),(0,n.jsx)(r.td,{children:"string"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"sometimes"}),", ",(0,n.jsx)(r.code,{children:"string"})]}),(0,n.jsx)(r.td,{children:"The provider's biography."}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"profiles"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"gender"})}),(0,n.jsx)(r.td,{children:"string"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"sometimes"}),", ",(0,n.jsx)(r.code,{children:"in:male,female"})]}),(0,n.jsx)(r.td,{children:"The provider's gender."}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"profiles"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"birth_date"})}),(0,n.jsx)(r.td,{children:"string"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"sometimes"}),", ",(0,n.jsx)(r.code,{children:"date"})]}),(0,n.jsx)(r.td,{children:"The provider's date of birth."}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"profiles"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"nationality_id"})}),(0,n.jsx)(r.td,{children:"integer"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"sometimes"}),", ",(0,n.jsx)(r.code,{children:"exists:nationalities,id"})]}),(0,n.jsx)(r.td,{children:"The ID of the provider's nationality."}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"profiles"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"state_id"})}),(0,n.jsx)(r.td,{children:"integer"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"sometimes"}),", ",(0,n.jsx)(r.code,{children:"exists:states,id"})]}),(0,n.jsx)(r.td,{children:"The ID of the provider's state."}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"profiles"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"city_id"})}),(0,n.jsx)(r.td,{children:"integer"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"sometimes"}),", ",(0,n.jsx)(r.code,{children:"exists:cities,id"})]}),(0,n.jsx)(r.td,{children:"The ID of the provider's city."}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"profiles"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"phone"})}),(0,n.jsx)(r.td,{children:"string"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"sometimes"})}),(0,n.jsx)(r.td,{children:"The provider's phone number."}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"users"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"contact_email"})}),(0,n.jsx)(r.td,{children:"string"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"sometimes"}),", ",(0,n.jsx)(r.code,{children:"email"})]}),(0,n.jsx)(r.td,{children:"An email address for contact purposes."}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"providers"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"avatar"})}),(0,n.jsx)(r.td,{children:"file or null"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"sometimes"})}),(0,n.jsxs)(r.td,{children:["A new profile picture (jpg/png, max 2MB) or ",(0,n.jsx)(r.code,{children:"null"})," to delete."]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"media"})})]})]})]}),"\n",(0,n.jsx)(r.hr,{}),"\n",(0,n.jsx)(r.h2,{id:"core-logic--key-concepts",children:"Core Logic & Key Concepts"}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Selective Updates"}),": The action uses conditional checks (",(0,n.jsx)(r.code,{children:"if (! $data->field instanceof Optional)"}),") to ensure it only updates the fields that were actually present in the request data. This makes the endpoint flexible, allowing a provider to update just one piece of information at a time."]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Data Segregation"}),": The provider's identity is intentionally split across multiple tables (",(0,n.jsx)(r.code,{children:"users"})," for core auth, ",(0,n.jsx)(r.code,{children:"profiles"})," for public info, ",(0,n.jsx)(r.code,{children:"providers"})," for provider-specific data). The ",(0,n.jsx)(r.code,{children:"UpdateProfileAction"})," correctly handles this by targeting the right table for each piece of data."]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Flexible Media Handling"}),": The ",(0,n.jsx)(r.code,{children:"avatar"})," field demonstrates a powerful pattern. Sending an ",(0,n.jsx)(r.code,{children:"UploadedFile"})," replaces the existing avatar. Sending ",(0,n.jsx)(r.code,{children:"null"})," explicitly deletes it. Sending nothing leaves it unchanged. This is handled by the Spatie MediaLibrary package."]}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,r,i)=>{i.d(r,{R:()=>t,x:()=>o});var d=i(6540);const n={},s=d.createContext(n);function t(e){const r=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),d.createElement(s.Provider,{value:r},e.children)}}}]);