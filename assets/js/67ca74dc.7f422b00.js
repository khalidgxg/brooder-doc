"use strict";(self.webpackChunkbrooder=self.webpackChunkbrooder||[]).push([[7656],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(6540);const t={},c=r.createContext(t);function o(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(c.Provider,{value:n},e.children)}},9498:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"workflows/shared/bank-accounts","title":"Bank Accounts","description":"This workflow covers how both Customers and Providers can manage their bank accounts. These accounts are used to receive funds via Withdrawal Requests. All endpoints in this workflow require authentication.","source":"@site/docs/workflows/shared/bank-accounts.md","sourceDirName":"workflows/shared","slug":"/workflows/shared/bank-accounts","permalink":"/brooder-doc/docs/workflows/shared/bank-accounts","draft":false,"unlisted":false,"editUrl":"https://github.com/khalidgxg/brooder/tree/main/docs/workflows/shared/bank-accounts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Categories, Skills, and Keywords","permalink":"/brooder-doc/docs/workflows/support/categories-and-skills"},"next":{"title":"Order Management","permalink":"/brooder-doc/docs/workflows/shared/orders-management"}}');var t=s(4848),c=s(8453);const o={},a="Bank Accounts",i={},d=[{value:"Flow Diagrams",id:"flow-diagrams",level:2},{value:"List Bank Accounts",id:"list-bank-accounts",level:3},{value:"Store Bank Account",id:"store-bank-account",level:3},{value:"Delete Bank Account",id:"delete-bank-account",level:3},{value:"1. List Bank Accounts",id:"1-list-bank-accounts",level:2},{value:"Success Response (200 OK)",id:"success-response-200-ok",level:3},{value:"2. Store Bank Account",id:"2-store-bank-account",level:2},{value:"Request Body",id:"request-body",level:3},{value:"Success Response (200 OK)",id:"success-response-200-ok-1",level:3},{value:"Error Response (422 Unprocessable Entity)",id:"error-response-422-unprocessable-entity",level:3},{value:"3. Delete Bank Account",id:"3-delete-bank-account",level:2},{value:"URL Parameters",id:"url-parameters",level:3},{value:"Success Response (200 OK)",id:"success-response-200-ok-2",level:3},{value:"Error Response (404 Not Found)",id:"error-response-404-not-found",level:3},{value:"Code Highlights &amp; Key Concepts",id:"code-highlights--key-concepts",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"bank-accounts",children:"Bank Accounts"})}),"\n",(0,t.jsxs)(n.p,{children:["This workflow covers how both Customers and Providers can manage their bank accounts. These accounts are used to receive funds via ",(0,t.jsx)(n.a,{href:"./withdrawal-requests",children:"Withdrawal Requests"}),". All endpoints in this workflow require authentication."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"flow-diagrams",children:"Flow Diagrams"}),"\n",(0,t.jsx)(n.h3,{id:"list-bank-accounts",children:"List Bank Accounts"}),"\n",(0,t.jsx)(n.mermaid,{value:'graph TD;\r\n    A["Authenticated user requests their accounts"] --\x3e B{"GET /api/v1/bank-accounts"};\r\n    B --\x3e C["Fetch all bank accounts<br>associated with the user\'s role<br>(Customer or Provider)"];\r\n    C --\x3e D["Return collection of bank accounts"];'}),"\n",(0,t.jsx)(n.h3,{id:"store-bank-account",children:"Store Bank Account"}),"\n",(0,t.jsx)(n.mermaid,{value:'graph TD;\r\n    E["User submits new bank account details"] --\x3e F{"POST /api/v1/bank-accounts"};\r\n    F --\x3e G{"Does user have less than 5 accounts?"};\r\n    G -- Yes --\x3e H["Create and save the new bank account"];\r\n    H --\x3e I["Return success message"];\r\n    G -- No --\x3e J["Return \'Max accounts reached\' error"];'}),"\n",(0,t.jsx)(n.h3,{id:"delete-bank-account",children:"Delete Bank Account"}),"\n",(0,t.jsx)(n.mermaid,{value:'graph TD;\r\n    K["User requests to delete an account"] --\x3e L{"DELETE /api/v1/bank-accounts/{id}"};\r\n    L --\x3e M["Find the account belonging to this user"];\r\n    M -- Not Found --\x3e N["Return 404 error"];\r\n    M -- Found --\x3e O{"Does this account have<br>withdrawal requests?"};\r\n    O -- Yes --\x3e P["Soft delete the account<br>(marks as deleted, keeps record)"];\r\n    P --\x3e Q["Return success message"];\r\n    O -- No --\x3e R["Permanently delete the account<br>from the database"];\r\n    R --\x3e Q;'}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"1-list-bank-accounts",children:"1. List Bank Accounts"}),"\n",(0,t.jsx)(n.p,{children:"Retrieves a list of all bank accounts associated with the authenticated user (Customer or Provider)."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Endpoint:"})," ",(0,t.jsx)(n.code,{children:"GET /api/v1/bank-accounts"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method:"})," ",(0,t.jsx)(n.code,{children:"GET"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication:"})," Required (Customer or Provider Token)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"success-response-200-ok",children:"Success Response (200 OK)"}),"\n",(0,t.jsx)(n.p,{children:"Returns an array of the user's bank account objects."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n    "message": "Data retrieved successfully.",\r\n    "data": [\r\n        {\r\n            "id": 1,\r\n            "bank_name": "Al-Rajhi Bank",\r\n            "account_number": "SA1234567890123456789012",\r\n            "holder_name": "Khalid Ghanim"\r\n        }\r\n    ]\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"2-store-bank-account",children:"2. Store Bank Account"}),"\n",(0,t.jsx)(n.p,{children:"Adds a new bank account for the authenticated user."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Endpoint:"})," ",(0,t.jsx)(n.code,{children:"POST /api/v1/bank-accounts"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method:"})," ",(0,t.jsx)(n.code,{children:"POST"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication:"})," Required (Customer or Provider Token)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Rules"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"bank_name"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Required, max 255 characters."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"account_number"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Required, must be a unique IBAN format."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"holder_name"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Required, max 255 characters."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"success-response-200-ok-1",children:"Success Response (200 OK)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n    "message": "Bank account created successfully."\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"error-response-422-unprocessable-entity",children:"Error Response (422 Unprocessable Entity)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If the user already has 5 or more bank accounts."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"3-delete-bank-account",children:"3. Delete Bank Account"}),"\n",(0,t.jsx)(n.p,{children:"Deletes a specific bank account by its ID."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Endpoint:"})," ",(0,t.jsx)(n.code,{children:"DELETE /api/v1/bank-accounts/{id}"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method:"})," ",(0,t.jsx)(n.code,{children:"DELETE"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication:"})," Required (Customer or Provider Token)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"url-parameters",children:"URL Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"id"})}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"The ID of the bank account to delete."})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"success-response-200-ok-2",children:"Success Response (200 OK)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n    "message": "Bank account deleted successfully."\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"error-response-404-not-found",children:"Error Response (404 Not Found)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If the ",(0,t.jsx)(n.code,{children:"id"})," does not correspond to a bank account owned by the authenticated user."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"code-highlights--key-concepts",children:"Code Highlights & Key Concepts"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Polymorphic Relationship"}),": The ",(0,t.jsx)(n.code,{children:"bankAccounts()"})," method is a polymorphic relationship defined on both the ",(0,t.jsx)(n.code,{children:"Customer"})," and ",(0,t.jsx)(n.code,{children:"Provider"})," models. This allows the same ",(0,t.jsx)(n.code,{children:"IndexBankAccountAction"})," to work for both user types without any conditional logic. It simply calls ",(0,t.jsx)(n.code,{children:"$user->bankAccounts()"})," on the authenticated user, and Laravel figures out whether to fetch accounts for a customer or a provider."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Business Rule Enforcement (",(0,t.jsx)(n.code,{children:"StoreBankAccountAction"}),")"]}),": This action enforces a clear business rule: a user cannot have more than 5 bank accounts. It performs a quick check (",(0,t.jsx)(n.code,{children:"->count() >= 5"}),") before attempting to create a new account and throws a custom ",(0,t.jsx)(n.code,{children:"LogicalException"})," with a user-friendly message if the limit is reached."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Conditional Deletion (",(0,t.jsx)(n.code,{children:"DeleteBankAccountAction"}),")"]}),": This action contains critical logic to preserve data integrity. Instead of simply deleting the account, it first checks if the account is associated with any ",(0,t.jsx)(n.code,{children:"withdrawalRequests"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.strong,{children:"yes"}),", it performs a ",(0,t.jsx)(n.strong,{children:"soft delete"})," (",(0,t.jsx)(n.code,{children:"$account->delete()"}),'). This keeps the record in the database but marks it as "deleted," so it no longer appears in lists. This is crucial for maintaining historical records of past withdrawals.']}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.strong,{children:"no"}),", it performs a ",(0,t.jsx)(n.strong,{children:"force delete"})," (",(0,t.jsx)(n.code,{children:"$account->forceDelete()"}),"), permanently removing the record from the database to save space.\r\nThis conditional approach is an excellent way to handle data retention rules."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);