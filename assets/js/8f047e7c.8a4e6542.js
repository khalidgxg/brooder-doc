"use strict";(self.webpackChunkbrooder=self.webpackChunkbrooder||[]).push([[8787],{1737:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"workflows/customer/order-management","title":"Order Management (Customer)","description":"This workflow details the order-related actions that a Customer can perform, such as creating a new order and marking a completed order. For shared actions like cancellations, please refer to the main Order Management documentation.","source":"@site/docs/workflows/customer/order-management.md","sourceDirName":"workflows/customer","slug":"/workflows/customer/order-management","permalink":"/brooder-doc/docs/workflows/customer/order-management","draft":false,"unlisted":false,"editUrl":"https://github.com/khalidgxg/brooder/tree/main/docs/workflows/customer/order-management.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Service Discovery","permalink":"/brooder-doc/docs/workflows/customer/service-discovery"}}');var s=t(4848),o=t(8453);const i={sidebar_position:3},a="Order Management (Customer)",d={},l=[{value:"1. Create a New Order",id:"1-create-a-new-order",level:2},{value:"Process Flow",id:"process-flow",level:3},{value:"Request Body",id:"request-body",level:3},{value:"2. Mark an Order as Completed",id:"2-mark-an-order-as-completed",level:2},{value:"Process Flow",id:"process-flow-1",level:3},{value:"Code Highlights &amp; Key Concepts",id:"code-highlights--key-concepts",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"order-management-customer",children:"Order Management (Customer)"})}),"\n",(0,s.jsxs)(r.p,{children:["This workflow details the order-related actions that a Customer can perform, such as creating a new order and marking a completed order. For shared actions like cancellations, please refer to the main ",(0,s.jsx)(r.a,{href:"../shared/orders-management",children:"Order Management documentation"}),"."]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"1-create-a-new-order",children:"1. Create a New Order"}),"\n",(0,s.jsx)(r.p,{children:"This endpoint allows a customer to purchase a service. The process involves calculating the total price (including optional upgrades and tax), validating the payment method, and creating the order record."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Endpoint:"})," ",(0,s.jsx)(r.code,{children:"POST /api/v1/orders"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Authorization:"})," Bearer Token (Customer)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Action:"})," ",(0,s.jsx)(r.code,{children:"Customers\\Orders\\StoreOrderAction"})]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"process-flow",children:"Process Flow"}),"\n",(0,s.jsx)(r.mermaid,{value:'graph TD\r\n    A["Customer POSTs to /orders<br>with service_id, payment_method, and optional upgrade_ids"] --\x3e B{"Start DB Transaction"};\r\n    B --\x3e C["Find the requested \'ACTIVE\' service"];\r\n    C --\x3e D{"Validate any provided `upgrade_ids`"};\r\n    D -- Invalid --\x3e E["Fail: The upgrades are invalid"];\r\n    D -- Valid --\x3e F["Calculate total price (service + upgrades)"];\r\n    F --\x3e G["Calculate tax value (based on a fixed percentage)"];\r\n    G --\x3e H["Create the Order record with status \'NEW\'"];\r\n    H --\x3e I["Sync upgrades to the order"];\r\n    I --\x3e J{"Handle Payment Method"};\r\n    J -- Wallet --\x3e K{"Check if customer\'s balance is sufficient"};\r\n    K -- Insufficient --\x3e L["Fail: Wallet does not have enough balance"];\r\n    K -- Sufficient --\x3e M["Transfer amount from Customer wallet<br>to General System wallet"];\r\n    J -- "Credit Card/Apple Pay" --\x3e N["Fail: Under Development"];\r\n    M --\x3e O["Commit Transaction"];\r\n    O --\x3e P((Success));'}),"\n",(0,s.jsx)(r.h3,{id:"request-body",children:"Request Body"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Field"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Rules"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"service_id"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"integer"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"required"}),", ",(0,s.jsx)(r.code,{children:"exists:services,id"})]}),(0,s.jsx)(r.td,{children:"The ID of the service being ordered."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"method_type"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"enum"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"required"}),", ",(0,s.jsx)(r.code,{children:"in:wallet,credit_card..."})]}),(0,s.jsx)(r.td,{children:"The chosen payment method."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"upgrades_ids"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"array"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"sometimes"})}),(0,s.jsx)(r.td,{children:"An array of IDs for any selected service upgrades."})]})]})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"2-mark-an-order-as-completed",children:"2. Mark an Order as Completed"}),"\n",(0,s.jsx)(r.p,{children:"This action is performed by the customer to confirm they are satisfied with the completed work. This is a critical step that triggers the distribution of funds from the system's holding account to the provider and other system wallets."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Endpoint:"})," ",(0,s.jsx)(r.code,{children:"PATCH /api/v1/orders/{id}/status/completed"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Authorization:"})," Bearer Token (Customer)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Action:"})," ",(0,s.jsx)(r.code,{children:"Customers\\Orders\\ChangeOrderStatusToCompletedAction"})]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"process-flow-1",children:"Process Flow"}),"\n",(0,s.jsx)(r.mermaid,{value:'graph TD\r\n    A["Customer PATCHes to /orders/{id}/status/completed"] --\x3e B{"Find the order owned by the customer"};\r\n    B --\x3e C{"Is the order status \'REVIEWING\'?"};\r\n    C -- No --\x3e D["Fail: Order status must be \'reviewing\'"];\r\n    C -- Yes --\x3e E["Start DB Transaction"];\r\n    E --\x3e F["Calculate Profit, Tax, and Provider\'s Net Amount"];\r\n    F --\x3e G["Transfer Provider\'s amount from<br>General System Wallet to Provider Wallet"];\r\n    G --\x3e H["Transfer Tax amount from<br>General System Wallet to Tax Wallet"];\r\n    H --\x3e I["Transfer Profit amount from<br>General System Wallet to Profit Wallet"];\r\n    I --\x3e J["Update Order status to \'COMPLETED\'"];\r\n    J --\x3e K["Commit Transaction"];\r\n    K --\x3e L((Success));'}),"\n",(0,s.jsx)(r.h3,{id:"code-highlights--key-concepts",children:"Code Highlights & Key Concepts"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Transactional Integrity"}),": Both order creation and completion are wrapped in ",(0,s.jsx)(r.code,{children:"DB::transaction()"}),". This is essential for financial operations. If a customer's wallet payment succeeds but the order record fails to be created, the entire operation is rolled back, preventing the customer from being charged for nothing."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsxs)(r.strong,{children:["Wallet System (",(0,s.jsx)(r.code,{children:"bavix/laravel-wallet"}),")"]}),": The application uses a robust wallet package to manage all financial transactions.","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Initial Payment:"})," When an order is created via the wallet, the total amount is moved from the customer's wallet to a ",(0,s.jsx)(r.code,{children:"General System"})," wallet. This acts as an escrow system."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Fund Distribution:"})," The ",(0,s.jsx)(r.code,{children:"ChangeOrderStatusToCompletedAction"})," is the key to the business logic. When an order is marked complete, this action calculates the platform's profit (20% of total) and the tax on that profit (15% of the profit). It then executes three separate, logged ",(0,s.jsx)(r.code,{children:"transferFloat"})," operations to move the correct amounts from the ",(0,s.jsx)(r.code,{children:"General System"})," wallet to the ",(0,s.jsx)(r.strong,{children:"Provider's wallet"}),", the dedicated ",(0,s.jsx)(r.strong,{children:"Taxes wallet"}),", and the dedicated ",(0,s.jsx)(r.strong,{children:"Profits wallet"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Idempotency & Status Checks"}),": The completion action explicitly checks if the order status is ",(0,s.jsx)(r.code,{children:"REVIEWING"}),". This prevents a customer from accidentally or maliciously completing an order multiple times, which would re-trigger the fund distribution logic. It ensures the financial transaction can only happen once per order."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Clear Financial Logging"}),": Each ",(0,s.jsx)(r.code,{children:"transferFloat"})," operation includes a detailed ",(0,s.jsx)(r.code,{children:"Extra"})," object with descriptions in both Arabic and English. This creates an auditable and clear transaction history for every movement of funds, which is crucial for financial tracking and dispute resolution."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"This concludes the documentation for Customer Order Management."})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>a});var n=t(6540);const s={},o=n.createContext(s);function i(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);