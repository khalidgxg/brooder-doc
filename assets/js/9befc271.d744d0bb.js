"use strict";(self.webpackChunkbrooder=self.webpackChunkbrooder||[]).push([[5272],{1677:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"workflows/provider/customer-creation","title":"Activate Customer Role","description":"This workflow allows a provider to activate the \\"customer\\" role for their own account. This does not create a new, separate customer. Instead, it transforms the provider\'s account into a dual-role account, allowing them to switch between provider and customer functionalities.","source":"@site/docs/workflows/provider/customer-creation.md","sourceDirName":"workflows/provider","slug":"/workflows/provider/customer-creation","permalink":"/brooder-doc/docs/workflows/provider/customer-creation","draft":false,"unlisted":false,"editUrl":"https://github.com/khalidgxg/brooder/tree/main/docs/workflows/provider/customer-creation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Review Management (Provider)","permalink":"/brooder-doc/docs/workflows/provider/review-management"},"next":{"title":"Provider Levels","permalink":"/brooder-doc/docs/workflows/provider/provider-levels"}}');var s=o(4848),n=o(8453);const i={},c="Activate Customer Role",a={},l=[{value:"Process Overview",id:"process-overview",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Core Logic &amp; Key Concepts",id:"core-logic--key-concepts",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"activate-customer-role",children:"Activate Customer Role"})}),"\n",(0,s.jsxs)(r.p,{children:['This workflow allows a provider to activate the "customer" role for their own account. This does ',(0,s.jsx)(r.strong,{children:"not"})," create a new, separate customer. Instead, it transforms the provider's account into a dual-role account, allowing them to switch between provider and customer functionalities."]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Endpoint:"})," ",(0,s.jsx)(r.code,{children:"POST /api/v1/provider/customers"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Authorization:"})," Bearer Token (Provider)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Action:"})," ",(0,s.jsx)(r.code,{children:"Providers\\Accounts\\CreateCustomerAccountAction"})]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"process-overview",children:"Process Overview"}),"\n",(0,s.jsx)(r.p,{children:"This action is a simple, one-time flag switch and role creation."}),"\n",(0,s.jsx)(r.mermaid,{value:'graph TD\r\n    A["Provider sends POST to /customers"] --\x3e B["CreateCustomerAccountAction"];\r\n    B --\x3e C{"Is `has_customer_account` true?"};\r\n    C -- "Yes" --\x3e D["Error: \'Customer account already exists\'"];\r\n    C -- "No" --\x3e E["Create a `customers` table record linked to this user"];\r\n    E --\x3e F["Set `has_customer_account` flag on `users` table to true"];\r\n    F --\x3e G(("Success: Return updated User object"));'}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"request-body",children:"Request Body"}),"\n",(0,s.jsx)(r.p,{children:"This endpoint does not require any request body."}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"core-logic--key-concepts",children:"Core Logic & Key Concepts"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Dual-Role Account"}),": The key concept here is that a single ",(0,s.jsx)(r.code,{children:"User"}),' in the system can have both a provider role and a customer role. This action is the mechanism by which a provider "unlocks" their customer-side capabilities.']}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Idempotency Check"}),": The ",(0,s.jsx)(r.code,{children:"if ($user->has_customer_account)"})," check ensures the action is idempotent. Running it more than once will result in an error on subsequent attempts, preventing the creation of duplicate customer roles for the same user."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Relationship Creation"}),": The core of the action is ",(0,s.jsx)(r.code,{children:" $user->customer()->create(...)"}),". This creates a new entry in the ",(0,s.jsx)(r.code,{children:"customers"})," table and automatically associates it with the provider's ",(0,s.jsx)(r.code,{children:"user_id"}),", officially establishing the link that defines their customer role."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,o)=>{o.d(r,{R:()=>i,x:()=>c});var t=o(6540);const s={},n=t.createContext(s);function i(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);