"use strict";(self.webpackChunkbrooder=self.webpackChunkbrooder||[]).push([[6496],{5589:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"workflows/shared/withdrawal-requests","title":"Withdrawal Requests","description":"This workflow outlines the process for Customers and Providers to request withdrawals from their Wallet to their registered Bank Accounts, and to cancel pending requests.","source":"@site/docs/workflows/shared/withdrawal-requests.md","sourceDirName":"workflows/shared","slug":"/workflows/shared/withdrawal-requests","permalink":"/brooder-doc/docs/workflows/shared/withdrawal-requests","draft":false,"unlisted":false,"editUrl":"https://github.com/khalidgxg/brooder/tree/main/docs/workflows/shared/withdrawal-requests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Wallet Management","permalink":"/brooder-doc/docs/workflows/shared/wallets"},"next":{"title":"Provider Setup","permalink":"/brooder-doc/docs/workflows/provider/setup"}}');var t=r(4848),i=r(8453);const a={},d="Withdrawal Requests",l={},o=[{value:"Flow Diagrams",id:"flow-diagrams",level:2},{value:"List Withdrawal Requests",id:"list-withdrawal-requests",level:3},{value:"Create Withdrawal Request",id:"create-withdrawal-request",level:3},{value:"Cancel Withdrawal Request",id:"cancel-withdrawal-request",level:3},{value:"1. List Withdrawal Requests",id:"1-list-withdrawal-requests",level:2},{value:"Success Response (200 OK)",id:"success-response-200-ok",level:3},{value:"2. Create Withdrawal Request",id:"2-create-withdrawal-request",level:2},{value:"Request Body",id:"request-body",level:3},{value:"Success Response (200 OK)",id:"success-response-200-ok-1",level:3},{value:"Error Responses",id:"error-responses",level:3},{value:"3. Cancel Withdrawal Request",id:"3-cancel-withdrawal-request",level:2},{value:"URL Parameters",id:"url-parameters",level:3},{value:"Success Response (200 OK)",id:"success-response-200-ok-2",level:3},{value:"Error Responses",id:"error-responses-1",level:3},{value:"Code Highlights &amp; Key Concepts",id:"code-highlights--key-concepts",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"withdrawal-requests",children:"Withdrawal Requests"})}),"\n",(0,t.jsxs)(s.p,{children:["This workflow outlines the process for Customers and Providers to request withdrawals from their ",(0,t.jsx)(s.a,{href:"./wallets",children:"Wallet"})," to their registered ",(0,t.jsx)(s.a,{href:"./bank-accounts",children:"Bank Accounts"}),", and to cancel pending requests."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"flow-diagrams",children:"Flow Diagrams"}),"\n",(0,t.jsx)(s.h3,{id:"list-withdrawal-requests",children:"List Withdrawal Requests"}),"\n",(0,t.jsx)(s.mermaid,{value:'graph TD;\r\n    subgraph "List Withdrawal Requests"\r\n        A["Authenticated user requests their withdrawals"] --\x3e B{"GET /api/v1/withdrawal-requests"};\r\n        B --\x3e C["Fetch all withdrawal requests<br>associated with the user\'s role<br>with pagination"];\r\n        C --\x3e D["Return paginated collection of requests"];\r\n    end'}),"\n",(0,t.jsx)(s.h3,{id:"create-withdrawal-request",children:"Create Withdrawal Request"}),"\n",(0,t.jsx)(s.mermaid,{value:'graph TD;\r\n    subgraph "Create Withdrawal Request"\r\n        E["User submits withdrawal details"] --\x3e F{"POST /api/v1/withdrawal-requests"};\r\n        F --\x3e G{"Verify payout method (e.g., Bank Account)"};\r\n        G -- Invalid --\x3e H["Return error"];\r\n        G -- Valid --\x3e I{"Validate user\'s balance<br>(e.g., Provider balance is 200 or more)"};\r\n        I -- Insufficient --\x3e H;\r\n        I -- Sufficient --\x3e J["Start DB Transaction"];\r\n        J --\x3e K["Withdraw amount from user\'s wallet"];\r\n        K --\x3e L["Create new withdrawal request record"];\r\n        L --\x3e M["Commit DB Transaction"];\r\n        M --\x3e N["Return success message"];\r\n    end'}),"\n",(0,t.jsx)(s.h3,{id:"cancel-withdrawal-request",children:"Cancel Withdrawal Request"}),"\n",(0,t.jsx)(s.mermaid,{value:'graph TD;\r\n    subgraph "Cancel Withdrawal Request"\r\n        O["User requests to cancel a withdrawal"] --\x3e P{"POST /api/v1/withdrawal-requests/{id}/cancel"};\r\n        P --\x3e Q["Find the request belonging to this user"];\r\n        Q -- Not Found --\x3e R["Return 404 error"];\r\n        Q -- Found --\x3e S{"Is the request status \'Pending\'?"};\r\n        S -- No --\x3e T["Return error \'Request not pending\'"];\r\n        S -- Yes --\x3e U["Start DB Transaction"];\r\n        U --\x3e V["Update request status to \'Cancelled\'"];\r\n        V --\x3e W["Deposit amount back into user\'s wallet"];\r\n        W --\x3e X["Commit DB Transaction"];\r\n        X --\x3e Y["Return success message"];\r\n    end'}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"1-list-withdrawal-requests",children:"1. List Withdrawal Requests"}),"\n",(0,t.jsx)(s.p,{children:"Retrieves a paginated list of all withdrawal requests associated with the authenticated user."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Endpoint:"})," ",(0,t.jsx)(s.code,{children:"GET /api/v1/withdrawal-requests"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Method:"})," ",(0,t.jsx)(s.code,{children:"GET"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Authentication:"})," Required (Customer or Provider Token)"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"success-response-200-ok",children:"Success Response (200 OK)"}),"\n",(0,t.jsx)(s.p,{children:"Returns a paginated list of the user's withdrawal request objects."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\r\n    "message": "Data retrieved successfully.",\r\n    "data": [\r\n        {\r\n            "id": 1,\r\n            "amount": 500.00,\r\n            "status": "Pending",\r\n            "created_at": "2023-10-27T10:00:00.000000Z",\r\n            "method": {\r\n                "id": 1,\r\n                "bank_name": "Al-Rajhi Bank",\r\n                "account_number": "SA1234567890123456789012"\r\n            }\r\n        }\r\n    ]\r\n}\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"2-create-withdrawal-request",children:"2. Create Withdrawal Request"}),"\n",(0,t.jsx)(s.p,{children:"Creates a new withdrawal request for the authenticated user's entire available balance."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Endpoint:"})," ",(0,t.jsx)(s.code,{children:"POST /api/v1/withdrawal-requests"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Method:"})," ",(0,t.jsx)(s.code,{children:"POST"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Authentication:"})," Required (Customer or Provider Token)"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Rules"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"method_type"})}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsxs)(s.td,{children:["Required. Must be ",(0,t.jsx)(s.code,{children:"bank_account"}),"."]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"method_id"})}),(0,t.jsx)(s.td,{children:"integer"}),(0,t.jsxs)(s.td,{children:["Required. The ID of the ",(0,t.jsx)(s.code,{children:"BankAccount"}),"."]})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"success-response-200-ok-1",children:"Success Response (200 OK)"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\r\n    "message": "Withdrawal request created successfully."\r\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"422 Unprocessable Entity:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["If the ",(0,t.jsx)(s.code,{children:"method_type"})," is not supported."]}),"\n",(0,t.jsxs)(s.li,{children:["If the ",(0,t.jsx)(s.code,{children:"method_id"})," is invalid."]}),"\n",(0,t.jsx)(s.li,{children:"If the user's balance does not meet the minimum requirement (e.g., 200 or more for Providers)."}),"\n",(0,t.jsx)(s.li,{children:"If a Customer has no balance (zero or less)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"3-cancel-withdrawal-request",children:"3. Cancel Withdrawal Request"}),"\n",(0,t.jsx)(s.p,{children:"Cancels a user's pending withdrawal request."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Endpoint:"})," ",(0,t.jsx)(s.code,{children:"POST /api/v1/withdrawal-requests/{id}/cancel"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Method:"})," ",(0,t.jsx)(s.code,{children:"POST"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Authentication:"})," Required (Customer or Provider Token)"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"url-parameters",children:"URL Parameters"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsx)(s.tbody,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"id"})}),(0,t.jsx)(s.td,{children:"integer"}),(0,t.jsx)(s.td,{children:"The ID of the withdrawal request to cancel."})]})})]}),"\n",(0,t.jsx)(s.h3,{id:"success-response-200-ok-2",children:"Success Response (200 OK)"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\r\n    "message": "Withdrawal request cancelled successfully."\r\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"error-responses-1",children:"Error Responses"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"404 Not Found:"})," If the ",(0,t.jsx)(s.code,{children:"id"})," does not correspond to a withdrawal request owned by the user."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"422 Unprocessable Entity:"})," If the request's status is not ",(0,t.jsx)(s.code,{children:"Pending"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"code-highlights--key-concepts",children:"Code Highlights & Key Concepts"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsxs)(s.strong,{children:["Database Transactions (",(0,t.jsx)(s.code,{children:"Create"})," and ",(0,t.jsx)(s.code,{children:"Cancel"})," actions)"]}),": Both creating and canceling a withdrawal are multi-step operations that must be atomic. For example, when creating a request, the system must (1) withdraw from the user's balance and (2) create the request record. If step 2 failed, the user's money would be gone without a record. By wrapping these operations in ",(0,t.jsx)(s.code,{children:"DB::transaction()"}),", we ensure that if any step fails, the entire operation is rolled back, preventing data inconsistency. This is a critical pattern for financial operations."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsxs)(s.strong,{children:["Role-Specific Validation (",(0,t.jsx)(s.code,{children:"CreateWithdrawalRequestsAction"}),")"]}),": The ",(0,t.jsx)(s.code,{children:"validateBalance"})," method demonstrates how to apply different business rules based on the user's role. It checks ",(0,t.jsx)(s.code,{children:"if ($user instanceof Provider)"})," to enforce a minimum withdrawal amount of 200, while for Customers, it simply ensures they have a positive balance. This is a clean way to handle logic that differs between user types."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsxs)(s.strong,{children:["Status-Change Integrity (",(0,t.jsx)(s.code,{children:"CancelWithdrawalRequestAction"}),")"]}),": The action first checks if the request is still ",(0,t.jsx)(s.code,{children:"Pending"}),". This is a vital safeguard to prevent users from canceling a request that has already been processed (",(0,t.jsx)(s.code,{children:"Completed"}),") or rejected (",(0,t.jsx)(s.code,{children:"Rejected"}),"). This prevents race conditions and ensures the state machine of the withdrawal process is respected. The amount is then safely returned to the user's wallet."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>a,x:()=>d});var n=r(6540);const t={},i=n.createContext(t);function a(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);