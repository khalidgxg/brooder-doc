"use strict";(self.webpackChunkbrooder=self.webpackChunkbrooder||[]).push([[9869],{1616:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"workflows/shared/orders-management","title":"Order Management","description":"This document outlines the complete lifecycle of an order, from creation by a customer to completion and potential cancellation. It details the state changes and the roles responsible for each step.","source":"@site/docs/workflows/shared/orders-management.md","sourceDirName":"workflows/shared","slug":"/workflows/shared/orders-management","permalink":"/brooder-doc/docs/workflows/shared/orders-management","draft":false,"unlisted":false,"editUrl":"https://github.com/khalidgxg/brooder/tree/main/docs/workflows/shared/orders-management.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Bank Accounts","permalink":"/brooder-doc/docs/workflows/shared/bank-accounts"},"next":{"title":"Profile Management","permalink":"/brooder-doc/docs/workflows/shared/profile-management"}}');var t=n(4848),i=n(8453);const o={},l="Order Management",c={},d=[{value:"The Order Lifecycle: A High-Level View",id:"the-order-lifecycle-a-high-level-view",level:2},{value:"Common Action: Listing Orders",id:"common-action-listing-orders",level:2},{value:"The Primary Workflow: From Creation to Completion",id:"the-primary-workflow-from-creation-to-completion",level:2},{value:"Step 1 (Customer): Create an Order",id:"step-1-customer-create-an-order",level:3},{value:"Step 2 (Provider): Manage the Order",id:"step-2-provider-manage-the-order",level:3},{value:"Step 3 (Customer): Complete the Order &amp; Trigger Financial Settlement",id:"step-3-customer-complete-the-order--trigger-financial-settlement",level:3},{value:"Financial Settlement Workflow",id:"financial-settlement-workflow",level:4},{value:"Alternative Workflow: Order Cancellation",id:"alternative-workflow-order-cancellation",level:2},{value:"Detailed Cancellation Logic",id:"detailed-cancellation-logic",level:3},{value:"Scenario 1: Cancelling a &#39;NEW&#39; Order",id:"scenario-1-cancelling-a-new-order",level:4},{value:"Scenario 2: Requesting to Cancel an &#39;IN_PROGRESS&#39; Order",id:"scenario-2-requesting-to-cancel-an-in_progress-order",level:4},{value:"Scenario 3: Accepting a Cancellation Request",id:"scenario-3-accepting-a-cancellation-request",level:4},{value:"Scenario 4: Rejecting a Cancellation Request",id:"scenario-4-rejecting-a-cancellation-request",level:4},{value:"Cancellation Workflow Diagram",id:"cancellation-workflow-diagram",level:3},{value:"Endpoints",id:"endpoints",level:4},{value:"Code Highlights &amp; Key Concepts",id:"code-highlights--key-concepts",level:2}];function a(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"order-management",children:"Order Management"})}),"\n",(0,t.jsx)(r.p,{children:"This document outlines the complete lifecycle of an order, from creation by a customer to completion and potential cancellation. It details the state changes and the roles responsible for each step."}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"the-order-lifecycle-a-high-level-view",children:"The Order Lifecycle: A High-Level View"}),"\n",(0,t.jsx)(r.p,{children:"An order progresses through several states, with actions from both the Customer and the Provider driving it forward. This diagram illustrates the primary path an order takes from creation to completion."}),"\n",(0,t.jsx)(r.mermaid,{value:'graph TD;\r\n    A["<b>Status: NEW</b><br>Customer Creates Order"] --\x3e|Provider Accepts| B["<b>Status: IN_PROGRESS</b><br>PATCH /provider/orders/{id}/status/in-progress"];\r\n    B --\x3e|Provider Delivers| C["<b>Status: REVIEWING</b><br>PATCH /provider/orders/{id}/status/reviewing"];\r\n    C --\x3e|Customer Completes| D["<b>Status: COMPLETED</b><br>PATCH /customer/orders/{id}/status/completed"];\r\n    D --\x3e E["Financial Settlement Occurs"];\r\n\r\n    subgraph "Cancellation is possible"\r\n      A --\x3e F{...};\r\n      B --\x3e F;\r\n    end'}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"common-action-listing-orders",children:"Common Action: Listing Orders"}),"\n",(0,t.jsx)(r.p,{children:"At any point in the lifecycle, both customers and providers can retrieve a list of their orders."}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Endpoint:"})," ",(0,t.jsx)(r.code,{children:"GET /api/v1/{user_type}/orders"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsxs)(r.strong,{children:[(0,t.jsx)(r.code,{children:"user_type"}),":"]})," ",(0,t.jsx)(r.code,{children:"customer"})," or ",(0,t.jsx)(r.code,{children:"provider"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Description:"})," Retrieves a paginated list of orders for the authenticated user. Supports filtering by status and sorting."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Controller:"})," ",(0,t.jsx)(r.code,{children:"Shared\\Orders\\IndexOrderController"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Action:"})," ",(0,t.jsx)(r.code,{children:"Shared\\Orders\\IndexOrderAction"})]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"the-primary-workflow-from-creation-to-completion",children:"The Primary Workflow: From Creation to Completion"}),"\n",(0,t.jsx)(r.p,{children:'This section details the step-by-step "happy path" of an order.'}),"\n",(0,t.jsx)(r.h3,{id:"step-1-customer-create-an-order",children:"Step 1 (Customer): Create an Order"}),"\n",(0,t.jsxs)(r.p,{children:["A customer initiates the process. This is a transactional process that ensures the order is only created if the payment succeeds. For more details on the request body and process, see the ",(0,t.jsx)(r.a,{href:"../customer/order-management",children:"Customer: Order Management documentation"}),"."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Endpoint:"})," ",(0,t.jsx)(r.code,{children:"POST /api/v1/customer/orders"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Status Change:"})," ",(0,t.jsx)(r.code,{children:"(None)"})," -> ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"NEW"})})]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Process Flow:"})}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"The system validates the requested service and upgrades."}),"\n",(0,t.jsx)(r.li,{children:"A database transaction begins."}),"\n",(0,t.jsxs)(r.li,{children:["An order record is created with the status ",(0,t.jsx)(r.code,{children:"NEW"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:["The customer's wallet is charged, and funds are moved to a central holding wallet (",(0,t.jsx)(r.code,{children:"generalSystem"}),")."]}),"\n",(0,t.jsx)(r.li,{children:"The transaction is committed. If any step fails, it is rolled back."}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"step-2-provider-manage-the-order",children:"Step 2 (Provider): Manage the Order"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"A. Accept Order"}),": The provider accepts the work.","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Endpoint"}),": ",(0,t.jsx)(r.code,{children:"PATCH /api/v1/provider/orders/{id}/status/in-progress"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Status Change:"})," ",(0,t.jsx)(r.code,{children:"NEW"})," -> ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"IN_PROGRESS"})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"B. Deliver Order"}),": The provider completes the work and submits it for review.","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Endpoint"}),": ",(0,t.jsx)(r.code,{children:"PATCH /api/v1/provider/orders/{id}/status/reviewing"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Status Change:"})," ",(0,t.jsx)(r.code,{children:"IN_PROGRESS"})," -> ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"REVIEWING"})})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"step-3-customer-complete-the-order--trigger-financial-settlement",children:"Step 3 (Customer): Complete the Order & Trigger Financial Settlement"}),"\n",(0,t.jsxs)(r.p,{children:["The customer reviews the delivered work and marks the order as complete, which triggers the financial distribution. For a detailed look at the financial settlement process, see the ",(0,t.jsx)(r.a,{href:"../customer/order-management",children:"Customer: Order Management documentation"}),"."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Endpoint"}),": ",(0,t.jsx)(r.code,{children:"PATCH /api/v1/customer/orders/{id}/status/completed"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Status Change:"})," ",(0,t.jsx)(r.code,{children:"REVIEWING"})," -> ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.code,{children:"COMPLETED"})})]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"financial-settlement-workflow",children:"Financial Settlement Workflow"}),"\n",(0,t.jsx)(r.p,{children:"This atomic process distributes the funds from the central holding wallet."}),"\n",(0,t.jsx)(r.mermaid,{value:'graph TD;\r\n    subgraph "Financial Settlement on Order Completion"\r\n        A["Customer marks Order as \'COMPLETED\'"] --\x3e B["<b>ChangeOrderStatusToCompletedAction</b>"];\r\n        B --\x3e C{"Start DB Transaction"};\r\n        C --\x3e D["Calculate Amounts:<br>1. Platform Profit (20% of Total)<br>2. Tax (15% of Profit)<br>3. Provider Earnings (Remainder)"];\r\n        D --\x3e E["<b>\'generalSystem\' Wallet</b><br>(Holds initial payment)"];\r\n        subgraph "Fund Distribution"\r\n            E --\x3e|Provider Earnings| F["<b>Provider\'s Wallet</b>"];\r\n            E --\x3e|Tax| G["<b>Taxes Wallet</b>"];\r\n            E --\x3e|Platform Profit| H["<b>Profits Wallet</b>"];\r\n        end\r\n        F & G & H --\x3e I{"Commit DB Transaction"};\r\n        I --\x3e J["Update Order Status to \'COMPLETED\'"];\r\n    end'}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"alternative-workflow-order-cancellation",children:"Alternative Workflow: Order Cancellation"}),"\n",(0,t.jsx)(r.p,{children:"If things don't go as planned, either the customer or provider can initiate a cancellation. This process is state-dependent."}),"\n",(0,t.jsx)(r.h3,{id:"detailed-cancellation-logic",children:"Detailed Cancellation Logic"}),"\n",(0,t.jsxs)(r.p,{children:["This workflow is handled by three main actions: ",(0,t.jsx)(r.code,{children:"StoreCancelOrderAction"}),", ",(0,t.jsx)(r.code,{children:"AcceptCancelOrderAction"}),", and ",(0,t.jsx)(r.code,{children:"RejectCancelOrderAction"}),"."]}),"\n",(0,t.jsx)(r.h4,{id:"scenario-1-cancelling-a-new-order",children:"Scenario 1: Cancelling a 'NEW' Order"}),"\n",(0,t.jsxs)(r.p,{children:["When a user cancels an order that is still ",(0,t.jsx)(r.code,{children:"NEW"}),", the process is immediate."]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Instant Approval"}),": The system sees the order is ",(0,t.jsx)(r.code,{children:"NEW"}),", so it immediately marks the order as ",(0,t.jsx)(r.code,{children:"is_cancelled = true"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Record Creation"}),": A ",(0,t.jsx)(r.code,{children:"CancelOrder"})," record is created with a status of ",(0,t.jsx)(r.code,{children:"APPROVED"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Full Refund"}),": The system instantly transfers the full ",(0,t.jsx)(r.code,{children:"total_price"})," from the central holding wallet back to the customer's wallet."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"scenario-2-requesting-to-cancel-an-in_progress-order",children:"Scenario 2: Requesting to Cancel an 'IN_PROGRESS' Order"}),"\n",(0,t.jsxs)(r.p,{children:["If the order is ",(0,t.jsx)(r.code,{children:"IN_PROGRESS"}),", a request/response flow begins."]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Check for Duplicates"}),": The system first checks if another ",(0,t.jsx)(r.code,{children:"PENDING"})," cancellation request already exists to prevent duplicates."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Create Pending Request"}),": A ",(0,t.jsx)(r.code,{children:"CancelOrder"})," record is created with a status of ",(0,t.jsx)(r.code,{children:"PENDING"}),". The record stores who is making the request and who needs to respond."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Await Response"}),": The order remains ",(0,t.jsx)(r.code,{children:"IN_PROGRESS"})," while waiting for the other party to accept or reject."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"scenario-3-accepting-a-cancellation-request",children:"Scenario 3: Accepting a Cancellation Request"}),"\n",(0,t.jsx)(r.p,{children:"When the receiving party agrees to cancel."}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Update Request"}),": The ",(0,t.jsx)(r.code,{children:"CancelOrder"})," status is changed from ",(0,t.jsx)(r.code,{children:"PENDING"})," to ",(0,t.jsx)(r.code,{children:"APPROVED"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Cancel Order"}),": The original order is now marked as ",(0,t.jsx)(r.code,{children:"is_cancelled = true"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Full Refund"}),": The customer is refunded the ",(0,t.jsx)(r.code,{children:"total_price"})," from the central holding wallet."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"scenario-4-rejecting-a-cancellation-request",children:"Scenario 4: Rejecting a Cancellation Request"}),"\n",(0,t.jsx)(r.p,{children:"When the receiving party does not agree to cancel."}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Update Request"}),": The ",(0,t.jsx)(r.code,{children:"CancelOrder"})," status is simply changed from ",(0,t.jsx)(r.code,{children:"PENDING"})," to ",(0,t.jsx)(r.code,{children:"REJECTED"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"No Other Changes"}),": The order remains ",(0,t.jsx)(r.code,{children:"IN_PROGRESS"}),", and no funds are moved. The workflow is expected to continue."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"cancellation-workflow-diagram",children:"Cancellation Workflow Diagram"}),"\n",(0,t.jsx)(r.mermaid,{value:'graph TD;\r\n    subgraph "Order Cancellation Workflow"\r\n        A["User Initiates Cancellation<br>POST /.../orders/{id}/cancel"] --\x3e B{Order Status?};\r\n        B -- "NEW" --\x3e C["Auto-approve & Refund Customer"];\r\n        B -- "IN_PROGRESS" --\x3e D{Pending request exists?};\r\n        D -- "No" --\x3e E["Create \'Pending\' request & Notify other party"];\r\n        E --\x3e F{Other party responds};\r\n        F -- "Accepts" --\x3e G["Refund Customer & Mark as Cancelled"];\r\n        F -- "Rejects" --\x3e H["Mark request as \'Rejected\'"];\r\n    end'}),"\n",(0,t.jsx)(r.h4,{id:"endpoints",children:"Endpoints"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Request Cancellation"}),": ",(0,t.jsx)(r.code,{children:"POST /api/v1/{user_type}/orders/{id}/cancel"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"View Requests"}),": ",(0,t.jsx)(r.code,{children:"GET /api/v1/{user_type}/orders/{id}/cancel"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Accept Request"}),": ",(0,t.jsx)(r.code,{children:"PATCH /api/v1/{user_type}/orders/{id}/cancel/{cancel_id}/accept"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Reject Request"}),": ",(0,t.jsx)(r.code,{children:"PATCH /api/v1/{user_type}/orders/{id}/cancel/{cancel_id}/reject"})]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"code-highlights--key-concepts",children:"Code Highlights & Key Concepts"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Atomic Operations"}),": Both order creation (",(0,t.jsx)(r.code,{children:"StoreOrderAction"}),") and financial settlement (",(0,t.jsx)(r.code,{children:"ChangeOrderStatusToCompletedAction"}),") are wrapped in ",(0,t.jsx)(r.code,{children:"DB::transaction()"}),". This ensures the platform's financial integrity."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"State Machine Enforcement"}),": Actions include prerequisite checks (e.g., must be ",(0,t.jsx)(r.code,{children:"REVIEWING"})," to be ",(0,t.jsx)(r.code,{children:"COMPLETED"}),"). This prevents invalid state transitions and ensures a robust lifecycle."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Central Holding Wallet"}),": Using a temporary ",(0,t.jsx)(r.code,{children:"generalSystem"})," wallet decouples customer payment from final settlement, enabling complex distributions and simplifying refunds."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Conditional Cancellation Logic"}),": The system intelligently handles cancellations based on the order's state (immediate for ",(0,t.jsx)(r.code,{children:"NEW"})," vs. a request/response flow for ",(0,t.jsx)(r.code,{children:"IN_PROGRESS"}),")."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var s=n(6540);const t={},i=s.createContext(t);function o(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);